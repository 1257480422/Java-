/*
    循环结构1：
标识符：字母，下划线，美元符号    a _a  $a
    建议 
驼峰标识： 接口开头字母大写   变量名首字母小写  
见名知意：


基本数据类型(4类8种)    不同类型标识不同的长度
数值型(整形 浮点)
整形类型：
byte(1字节-128-127)  short(两个字节-32768--32767)   
int(四个字节)     log(八个字节) 后必须加L标记

浮点类型：
float:  单精度(精确到后7位) 数字后面必须添加f&F
double: 双精度(精确到后14位)

字符类型：char
布尔类型：boolean
 
 
引用数据类型：
类 接口 数组 对象等

变量和常量
变量：声明+赋值 int a=10;
常量：使用final关键字修饰的变量
￥￥￥在类内 方法外定义的变量叫做成员变量，会存在默认值
在方法内 的定义的变量必须要进行初始化操作，不会存在默认值

    运算符：+ - * / %
            =赋值 ==等于   ￥￥进行操作时 a+=2->a+2
            逻辑运算符：&&：短路与  左边F 右边不需要判断
                        ||：短路或  左边F 右边不需要判断
                        &：(与运算)两边都会参与运算
                        |：(或运算)
    三目运算符：(3>2?3:2)成立返回？后面的---不成立返回：后面的                        
    
 
*/

/*
    循环结构2：
    while、do while、 switch(30min)
    $$$对比break 和 continue
    break可以用于switch和循环结构中(跳出循环模块)
    continue用在循环结构中(跳过本次循环剩下的部分)
    
    return作用：1.返回方法的返回值     2.终止当前程序

*/

3-3
/*
递归，数组，排序(网站 visualgo)
  数组经常考的排序算法：
       1.写出某种排序算法：冒泡 选择 快速
       
       2.排序算法的时间复杂度：时间复杂度，空间复杂度
       
       3.排序算法的稳定性：
       排序之后的值和排序之前的值位置是否发生改变
   二位数组
    定义二位数组的时候一定要注意 必须给定数组的长度
    int[]   arr=new int[6];
    int[] [] arr2=new int[3][];//前面必须要赋值(3) 后面可以不用
    //二位数组的定义
    arr2[0]=new int[2];
    arr2[1]=new int[3];
    arr2[2]=new int[3];
     
    arr2[0][0]=1;     
    arr2[0][1]=2;
    arr2[1][0]=4; 
    arr2[1][1]=5;
    arr2[1][2]=6;
    arr2[2][0]=7;
    arr2[2][1]=8;
    arr2[2][2]=9;
    for(int i=0;i<arr2.length;i++){
        for(int j=0;j<arr2.length;j++){
            System.out.print(arr2[i][j]+"\t");
        }
        System.out.println();
    }
    
*/

//Java面向对象1
/*
https://blog.csdn.net/u010611510/article/details/122368635?ops_request_misc=&request_id=&biz_id=102&utm_term=java%E4%B8%AD%E5%AF%B9%E8%B1%A1%20%E7%B1%BB%20%E5%B1%9E%E6%80%A7&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-122368635.142^v73^insert_down1,201^v4^add_ask,239^v2^insert_chatgpt&spm=1018.2226.3001.4187

https://blog.csdn.net/m0_63793462/article/details/128572069?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-128572069-blog-122368635.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-128572069-blog-122368635.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=5

OOP：object oriented programming
类(class)(抽象)（一类东西）和对象（具体的一类东西）
类可以生成对象 类是对象的抽象
方法：对象执行的操作  (在java中没有函数 只有方法)
对象：用来表述客观事物的一个实体，由一组属性和方法构成
在java中必须把东西写道类里面 public class.....
*** 类是对象的一个抽象  对象是类的实例化
例子：一只狗
属性
颜色：白色
方法
吃，跑，叫

psvm=public static void main()
属性：语法
[访问修饰符](可以省略) [属性类型]  [属性名称]=[默认值]
public class Stadent{
    int staNumber；
    String name；
    
}

方法类型(main 也算方法类型)：语法
[访问修饰符](可以省)    返回值类型   方法名称{
        逻辑代码
} 
void study(){
System.out.println("   ");
}

public class NEW 
*** 一个java文件中可以定义N多个java文件
但是只能有有一个public class并且public class的类名跟文件名保持一致
*/

/*
//对象的创建和使用
例子：
public class Student{
    //属性的定义
    int stuNumber；
    String name;
    int age=20;
    //定义的方法
    void study{
        System.out.println("111");
    }
    void eat(String food){
        System.out.println("我在吃"+food);
    }
    public static void main(String[] args){
        //创建对象
        Student student=new Student();
        //使用属性
        System.out.println(Student.name);
        System.out.println(Student.age);
        System.out.println(Student.stuNumber);
         //修改属性值，或者给属性赋值
         student.name="张三";
         student.age=40;
         student.staNumber=20221114130；
            System.out.println(Student.name);
            System.out.println(Student.age);
            System.out.println(Student.stuNumber);

        //调用方法
        student.study();//直接打印内容
        student.eat(foof:"apple");//必须传参给方法
    }
}

*/

//java面向对象2 ？？？
/*
局部变量：定义在方法中的变量 
public void show(){
    int a=10;//局部变量
}

成员变量：类内的变量叫做成员变量（全局变量）

引用类型：类、接口、数组

this 关键字：表示当前对象的指针
    指向当前对象，表示当前对象的引用
用处：
    1.构造方法，当前构造方法中的参数名称跟类的成员变量名称一样
    的时候，可以使用this代表当前对象
    2.普通方法中
    当多个普通方法之间需要调用的时候，可以使用this来进行调用，
    指的是当前对象的其他方法
    3.成员变量的使用：
    当方法中的参数名称跟成员变量保持一致的时候，使用this变量名称
    表示的是对象的值 
    
    
static 关键字：表示修饰成员变量的时候，表示静态成员变量或者叫类变量
                普通变量在使用的时候，必须要通过对象进行调用
                类变量或者静态变量可以使用对象名调用可以使用类名调用
                
public class StaticDemo{
    String name="zhangsan";
    static int age=10;
}
StaticDemo staticDemo=new StaticDemo;
    //使用对象进行调用时
    System.out.println(staticDemo.name);
    System.out.println(staticDemo.age);
    //使用类名调用
    System.out.println(StaticDemo.age);
    
*/

/*
代码块：分类
普通代码块：定义在方法中，使用{}括起来的
构造代码块：定义在类中用{}括起来的代码叫做构造代码块
        注意：每次代码运行的时候会将构造代码块中的代码添加到构造方法的前面
                构造代码块中的代码会添加到每一个构造方法中，当使用this的时候不会添加
                
静态代码块：使用static{}括号起来的代码角坐静态代码块，在程序载入的时候优先执行
        数据库连接等其他提前需要准备好的代码会放在static代码块
同步代码块：在多线程的时候会使用，用来给共享空间进行加锁操作

pakage：包  对应到文件系统就是多级目录
为了解决两个问题：
1.为了解决类之间的重复冲突（文件同名问题）
2.稳了方便管理类，将具体功能的代码放到同一个目录下
使用：一般定义package会放置在java文件的第一行
        package 域名的倒写
        例：package com.mashibing
        
jdk中常见的包：
lang：不需要手动导入，自动加载 
util：工具包
net：网络包
io： 输入输出包

import：
当需要引入非lang包的其他java 类的时候  需要使用import工具
如果不适用impor，每次在使用某个类的时候必须要将类的完全限定名都加上才可以使用，太过于频繁

用法：
    impor java 包名 类名： 导入具体的类 (推荐)
    impor 包名.*   将当前包下的所有文件都进行导入
    注意：当一个java文件中需要使用多个同名的类的时候 只能选择到入一个，另外一个使用完全限定名的方式进行写
    
静态导包：当需要使用某个类的多个方法的时候 同时又不想频繁书写该类的名称 此使可以使用静态导包
System.out.println(Math.sqrt(2));
或者静态导包：
import static java.lang.Math.*;
System.out.println(sqrt(2));

面向对象的三大特征：封装
概念：将类的某些信息隐藏在类的内部，不允许外界程序直接访问
        而是通过该类提供的方法来实现对隐藏信息的操作和访问
    封装解决什么问题：
        如果任何一个处理类都可以对dog进行赋值操作，那么当值不准确的时候，可能会产生额外的结果
       
        封装可以解决：
        使用封装额可以从保证数据的规范，不符合规范的数据将无法进行操作
        好处：
        1.隐藏类的实现细节
        2.只能通过提供的方法进行调用
        3.可以根据需求添加复杂的逻辑判断语句
 
 
在java中明确定义了访问权限；
        限制访问，以下分类按照从大到小进行排序
        public： 公共的
            当前项目的所有的类都可以进行访问
        protected：受保护的
        可以被当前类访问，可以被当前包访问，也可以被类访问
        default：默认权限
        可以被当前类访问，可以被当前包访问
        privare：私有的权限
        只能被当前类访问 



*/



public class Date{
    static int d;//在类内 有默认值
    public static void main(string[] args){   
    
            //在方法内 无默认值
            int c;
         
    }
    
}







